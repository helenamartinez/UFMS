# -*- coding: utf-8 -*-
#Helena Maria Guedes Mart√≠nez

import pandas as pd
from sklearn.model_selection import KFold
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix

# Load the dataset from the URL
data = pd.read_csv('https://archive.ics.uci.edu/static/public/73/data.csv')

# Handle missing values in 'stalk-root' by filling with the most frequent value
data['stalk-root'].fillna(data['stalk-root'].mode()[0], inplace=True)

# Encode categorical variables using one-hot encoding
data_encoded = pd.get_dummies(data)

# Separate features and target variable
X = data_encoded.drop('poisonous_p', axis=1)  # features
y = data_encoded['poisonous_p']  # target variable

# Initialize k-fold cross-validation
kf = KFold(n_splits=10, shuffle=True, random_state=42)

# Initialize list to store results
results_list = []

# Perform k-fold cross-validation
for fold, (train_index, test_index) in enumerate(kf.split(X), 1):
    X_train, X_test = X.iloc[train_index], X.iloc[test_index]
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]

    # Train a decision tree classifier
    model = DecisionTreeClassifier(random_state=42)
    model.fit(X_train, y_train)

    # Make predictions on the test set
    y_pred = model.predict(X_test)

    # Calculate the confusion matrix
    tn, fp, fn, tp = confusion_matrix(y_test, y_pred).ravel()

    # Calculate the number of edible and poisonous mushrooms
    edible_count = tp + fn
    poisonous_count = tn + fp
    total_count = edible_count + poisonous_count

    # Store the results in a dictionary
    results_dict = {
        'Fold': fold,
        'Edible': edible_count,
        'Poisonous': poisonous_count,
        'Total': total_count
    }

    # Add the results to the list
    results_list.append(results_dict)

# Create a DataFrame from the results list
results = pd.DataFrame(results_list)

# Calculate the total counts for each class
total_row = {
    'Fold': 'Total',
    'Edible': results['Edible'].sum(),
    'Poisonous': results['Poisonous'].sum(),
    'Total': results['Total'].sum()
}

# Add the total row to the DataFrame
results = pd.concat([results, pd.DataFrame([total_row])], ignore_index=True)

if __name__ == '__main__':
    print(results)
